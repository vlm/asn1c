
/*** <<< INCLUDES [OK-Integer1] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [OK-Integer1] >>> ***/

typedef long	 OK_Integer1_t;

/*** <<< FUNC-DECLS [OK-Integer1] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_OK_Integer1;
asn_struct_free_f OK_Integer1_free;
asn_struct_print_f OK_Integer1_print;
asn_constr_check_f OK_Integer1_constraint;
ber_type_decoder_f OK_Integer1_decode_ber;
der_type_encoder_f OK_Integer1_encode_der;
xer_type_decoder_f OK_Integer1_decode_xer;
xer_type_encoder_f OK_Integer1_encode_xer;

/*** <<< CODE [OK-Integer1] >>> ***/

int
OK_Integer1_constraint(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	/* Replace with underlying type checker */
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	return td->check_constraints(td, sptr, ctfailcb, app_key);
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */
static void
OK_Integer1_1_inherit_TYPE_descriptor(asn_TYPE_descriptor_t *td) {
	td->free_struct    = asn_DEF_NativeInteger.free_struct;
	td->print_struct   = asn_DEF_NativeInteger.print_struct;
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	td->ber_decoder    = asn_DEF_NativeInteger.ber_decoder;
	td->der_encoder    = asn_DEF_NativeInteger.der_encoder;
	td->xer_decoder    = asn_DEF_NativeInteger.xer_decoder;
	td->xer_encoder    = asn_DEF_NativeInteger.xer_encoder;
	td->elements       = asn_DEF_NativeInteger.elements;
	td->elements_count = asn_DEF_NativeInteger.elements_count;
	td->specifics      = asn_DEF_NativeInteger.specifics;
}

void
OK_Integer1_free(asn_TYPE_descriptor_t *td,
		void *struct_ptr, int contents_only) {
	OK_Integer1_1_inherit_TYPE_descriptor(td);
	td->free_struct(td, struct_ptr, contents_only);
}

int
OK_Integer1_print(asn_TYPE_descriptor_t *td, const void *struct_ptr,
		int ilevel, asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer1_1_inherit_TYPE_descriptor(td);
	return td->print_struct(td, struct_ptr, ilevel, cb, app_key);
}

asn_dec_rval_t
OK_Integer1_decode_ber(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const void *bufptr, size_t size, int tag_mode) {
	OK_Integer1_1_inherit_TYPE_descriptor(td);
	return td->ber_decoder(opt_codec_ctx, td, structure, bufptr, size, tag_mode);
}

asn_enc_rval_t
OK_Integer1_encode_der(asn_TYPE_descriptor_t *td,
		void *structure, int tag_mode, ber_tlv_tag_t tag,
		asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer1_1_inherit_TYPE_descriptor(td);
	return td->der_encoder(td, structure, tag_mode, tag, cb, app_key);
}

asn_dec_rval_t
OK_Integer1_decode_xer(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const char *opt_mname, const void *bufptr, size_t size) {
	OK_Integer1_1_inherit_TYPE_descriptor(td);
	return td->xer_decoder(opt_codec_ctx, td, structure, opt_mname, bufptr, size);
}

asn_enc_rval_t
OK_Integer1_encode_xer(asn_TYPE_descriptor_t *td, void *structure,
		int ilevel, enum xer_encoder_flags_e flags,
		asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer1_1_inherit_TYPE_descriptor(td);
	return td->xer_encoder(td, structure, ilevel, flags, cb, app_key);
}


/*** <<< STAT-DEFS [OK-Integer1] >>> ***/

static const ber_tlv_tag_t asn_DEF_OK_Integer1_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_OK_Integer1 = {
	"OK-Integer1",
	"OK-Integer1",
	OK_Integer1_free,
	OK_Integer1_print,
	OK_Integer1_constraint,
	OK_Integer1_decode_ber,
	OK_Integer1_encode_der,
	OK_Integer1_decode_xer,
	OK_Integer1_encode_xer,
	0, 0,	/* No PER support, use "-gen-PER" to enable */
	0, 0,	/* No APER */
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_OK_Integer1_tags_1,
	sizeof(asn_DEF_OK_Integer1_tags_1)
		/sizeof(asn_DEF_OK_Integer1_tags_1[0]), /* 1 */
	asn_DEF_OK_Integer1_tags_1,	/* Same as above */
	sizeof(asn_DEF_OK_Integer1_tags_1)
		/sizeof(asn_DEF_OK_Integer1_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [OK-Integer2] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [OK-Integer2] >>> ***/

typedef long	 OK_Integer2_t;

/*** <<< FUNC-DECLS [OK-Integer2] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_OK_Integer2;
asn_struct_free_f OK_Integer2_free;
asn_struct_print_f OK_Integer2_print;
asn_constr_check_f OK_Integer2_constraint;
ber_type_decoder_f OK_Integer2_decode_ber;
der_type_encoder_f OK_Integer2_encode_der;
xer_type_decoder_f OK_Integer2_decode_xer;
xer_type_encoder_f OK_Integer2_encode_xer;

/*** <<< CODE [OK-Integer2] >>> ***/

int
OK_Integer2_constraint(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	/* Replace with underlying type checker */
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	return td->check_constraints(td, sptr, ctfailcb, app_key);
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */
static void
OK_Integer2_1_inherit_TYPE_descriptor(asn_TYPE_descriptor_t *td) {
	td->free_struct    = asn_DEF_NativeInteger.free_struct;
	td->print_struct   = asn_DEF_NativeInteger.print_struct;
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	td->ber_decoder    = asn_DEF_NativeInteger.ber_decoder;
	td->der_encoder    = asn_DEF_NativeInteger.der_encoder;
	td->xer_decoder    = asn_DEF_NativeInteger.xer_decoder;
	td->xer_encoder    = asn_DEF_NativeInteger.xer_encoder;
	td->elements       = asn_DEF_NativeInteger.elements;
	td->elements_count = asn_DEF_NativeInteger.elements_count;
	td->specifics      = asn_DEF_NativeInteger.specifics;
}

void
OK_Integer2_free(asn_TYPE_descriptor_t *td,
		void *struct_ptr, int contents_only) {
	OK_Integer2_1_inherit_TYPE_descriptor(td);
	td->free_struct(td, struct_ptr, contents_only);
}

int
OK_Integer2_print(asn_TYPE_descriptor_t *td, const void *struct_ptr,
		int ilevel, asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer2_1_inherit_TYPE_descriptor(td);
	return td->print_struct(td, struct_ptr, ilevel, cb, app_key);
}

asn_dec_rval_t
OK_Integer2_decode_ber(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const void *bufptr, size_t size, int tag_mode) {
	OK_Integer2_1_inherit_TYPE_descriptor(td);
	return td->ber_decoder(opt_codec_ctx, td, structure, bufptr, size, tag_mode);
}

asn_enc_rval_t
OK_Integer2_encode_der(asn_TYPE_descriptor_t *td,
		void *structure, int tag_mode, ber_tlv_tag_t tag,
		asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer2_1_inherit_TYPE_descriptor(td);
	return td->der_encoder(td, structure, tag_mode, tag, cb, app_key);
}

asn_dec_rval_t
OK_Integer2_decode_xer(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const char *opt_mname, const void *bufptr, size_t size) {
	OK_Integer2_1_inherit_TYPE_descriptor(td);
	return td->xer_decoder(opt_codec_ctx, td, structure, opt_mname, bufptr, size);
}

asn_enc_rval_t
OK_Integer2_encode_xer(asn_TYPE_descriptor_t *td, void *structure,
		int ilevel, enum xer_encoder_flags_e flags,
		asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer2_1_inherit_TYPE_descriptor(td);
	return td->xer_encoder(td, structure, ilevel, flags, cb, app_key);
}


/*** <<< STAT-DEFS [OK-Integer2] >>> ***/

static const ber_tlv_tag_t asn_DEF_OK_Integer2_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_OK_Integer2 = {
	"OK-Integer2",
	"OK-Integer2",
	OK_Integer2_free,
	OK_Integer2_print,
	OK_Integer2_constraint,
	OK_Integer2_decode_ber,
	OK_Integer2_encode_der,
	OK_Integer2_decode_xer,
	OK_Integer2_encode_xer,
	0, 0,	/* No PER support, use "-gen-PER" to enable */
	0, 0,	/* No APER */
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_OK_Integer2_tags_1,
	sizeof(asn_DEF_OK_Integer2_tags_1)
		/sizeof(asn_DEF_OK_Integer2_tags_1[0]), /* 1 */
	asn_DEF_OK_Integer2_tags_1,	/* Same as above */
	sizeof(asn_DEF_OK_Integer2_tags_1)
		/sizeof(asn_DEF_OK_Integer2_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [OK-Integer3] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [OK-Integer3] >>> ***/

typedef long	 OK_Integer3_t;

/*** <<< FUNC-DECLS [OK-Integer3] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_OK_Integer3;
asn_struct_free_f OK_Integer3_free;
asn_struct_print_f OK_Integer3_print;
asn_constr_check_f OK_Integer3_constraint;
ber_type_decoder_f OK_Integer3_decode_ber;
der_type_encoder_f OK_Integer3_encode_der;
xer_type_decoder_f OK_Integer3_decode_xer;
xer_type_encoder_f OK_Integer3_encode_xer;

/*** <<< CODE [OK-Integer3] >>> ***/

int
OK_Integer3_constraint(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	/* Replace with underlying type checker */
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	return td->check_constraints(td, sptr, ctfailcb, app_key);
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */
static void
OK_Integer3_1_inherit_TYPE_descriptor(asn_TYPE_descriptor_t *td) {
	td->free_struct    = asn_DEF_NativeInteger.free_struct;
	td->print_struct   = asn_DEF_NativeInteger.print_struct;
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	td->ber_decoder    = asn_DEF_NativeInteger.ber_decoder;
	td->der_encoder    = asn_DEF_NativeInteger.der_encoder;
	td->xer_decoder    = asn_DEF_NativeInteger.xer_decoder;
	td->xer_encoder    = asn_DEF_NativeInteger.xer_encoder;
	td->elements       = asn_DEF_NativeInteger.elements;
	td->elements_count = asn_DEF_NativeInteger.elements_count;
	td->specifics      = asn_DEF_NativeInteger.specifics;
}

void
OK_Integer3_free(asn_TYPE_descriptor_t *td,
		void *struct_ptr, int contents_only) {
	OK_Integer3_1_inherit_TYPE_descriptor(td);
	td->free_struct(td, struct_ptr, contents_only);
}

int
OK_Integer3_print(asn_TYPE_descriptor_t *td, const void *struct_ptr,
		int ilevel, asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer3_1_inherit_TYPE_descriptor(td);
	return td->print_struct(td, struct_ptr, ilevel, cb, app_key);
}

asn_dec_rval_t
OK_Integer3_decode_ber(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const void *bufptr, size_t size, int tag_mode) {
	OK_Integer3_1_inherit_TYPE_descriptor(td);
	return td->ber_decoder(opt_codec_ctx, td, structure, bufptr, size, tag_mode);
}

asn_enc_rval_t
OK_Integer3_encode_der(asn_TYPE_descriptor_t *td,
		void *structure, int tag_mode, ber_tlv_tag_t tag,
		asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer3_1_inherit_TYPE_descriptor(td);
	return td->der_encoder(td, structure, tag_mode, tag, cb, app_key);
}

asn_dec_rval_t
OK_Integer3_decode_xer(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const char *opt_mname, const void *bufptr, size_t size) {
	OK_Integer3_1_inherit_TYPE_descriptor(td);
	return td->xer_decoder(opt_codec_ctx, td, structure, opt_mname, bufptr, size);
}

asn_enc_rval_t
OK_Integer3_encode_xer(asn_TYPE_descriptor_t *td, void *structure,
		int ilevel, enum xer_encoder_flags_e flags,
		asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer3_1_inherit_TYPE_descriptor(td);
	return td->xer_encoder(td, structure, ilevel, flags, cb, app_key);
}


/*** <<< STAT-DEFS [OK-Integer3] >>> ***/

static const ber_tlv_tag_t asn_DEF_OK_Integer3_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_OK_Integer3 = {
	"OK-Integer3",
	"OK-Integer3",
	OK_Integer3_free,
	OK_Integer3_print,
	OK_Integer3_constraint,
	OK_Integer3_decode_ber,
	OK_Integer3_encode_der,
	OK_Integer3_decode_xer,
	OK_Integer3_encode_xer,
	0, 0,	/* No PER support, use "-gen-PER" to enable */
	0, 0,	/* No APER */
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_OK_Integer3_tags_1,
	sizeof(asn_DEF_OK_Integer3_tags_1)
		/sizeof(asn_DEF_OK_Integer3_tags_1[0]), /* 1 */
	asn_DEF_OK_Integer3_tags_1,	/* Same as above */
	sizeof(asn_DEF_OK_Integer3_tags_1)
		/sizeof(asn_DEF_OK_Integer3_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [OK-Integer4] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [OK-Integer4] >>> ***/

typedef long	 OK_Integer4_t;

/*** <<< FUNC-DECLS [OK-Integer4] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_OK_Integer4;
asn_struct_free_f OK_Integer4_free;
asn_struct_print_f OK_Integer4_print;
asn_constr_check_f OK_Integer4_constraint;
ber_type_decoder_f OK_Integer4_decode_ber;
der_type_encoder_f OK_Integer4_encode_der;
xer_type_decoder_f OK_Integer4_decode_xer;
xer_type_encoder_f OK_Integer4_encode_xer;

/*** <<< CODE [OK-Integer4] >>> ***/

int
OK_Integer4_constraint(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	/* Replace with underlying type checker */
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	return td->check_constraints(td, sptr, ctfailcb, app_key);
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */
static void
OK_Integer4_1_inherit_TYPE_descriptor(asn_TYPE_descriptor_t *td) {
	td->free_struct    = asn_DEF_NativeInteger.free_struct;
	td->print_struct   = asn_DEF_NativeInteger.print_struct;
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	td->ber_decoder    = asn_DEF_NativeInteger.ber_decoder;
	td->der_encoder    = asn_DEF_NativeInteger.der_encoder;
	td->xer_decoder    = asn_DEF_NativeInteger.xer_decoder;
	td->xer_encoder    = asn_DEF_NativeInteger.xer_encoder;
	td->elements       = asn_DEF_NativeInteger.elements;
	td->elements_count = asn_DEF_NativeInteger.elements_count;
	td->specifics      = asn_DEF_NativeInteger.specifics;
}

void
OK_Integer4_free(asn_TYPE_descriptor_t *td,
		void *struct_ptr, int contents_only) {
	OK_Integer4_1_inherit_TYPE_descriptor(td);
	td->free_struct(td, struct_ptr, contents_only);
}

int
OK_Integer4_print(asn_TYPE_descriptor_t *td, const void *struct_ptr,
		int ilevel, asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer4_1_inherit_TYPE_descriptor(td);
	return td->print_struct(td, struct_ptr, ilevel, cb, app_key);
}

asn_dec_rval_t
OK_Integer4_decode_ber(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const void *bufptr, size_t size, int tag_mode) {
	OK_Integer4_1_inherit_TYPE_descriptor(td);
	return td->ber_decoder(opt_codec_ctx, td, structure, bufptr, size, tag_mode);
}

asn_enc_rval_t
OK_Integer4_encode_der(asn_TYPE_descriptor_t *td,
		void *structure, int tag_mode, ber_tlv_tag_t tag,
		asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer4_1_inherit_TYPE_descriptor(td);
	return td->der_encoder(td, structure, tag_mode, tag, cb, app_key);
}

asn_dec_rval_t
OK_Integer4_decode_xer(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const char *opt_mname, const void *bufptr, size_t size) {
	OK_Integer4_1_inherit_TYPE_descriptor(td);
	return td->xer_decoder(opt_codec_ctx, td, structure, opt_mname, bufptr, size);
}

asn_enc_rval_t
OK_Integer4_encode_xer(asn_TYPE_descriptor_t *td, void *structure,
		int ilevel, enum xer_encoder_flags_e flags,
		asn_app_consume_bytes_f *cb, void *app_key) {
	OK_Integer4_1_inherit_TYPE_descriptor(td);
	return td->xer_encoder(td, structure, ilevel, flags, cb, app_key);
}


/*** <<< STAT-DEFS [OK-Integer4] >>> ***/

static const ber_tlv_tag_t asn_DEF_OK_Integer4_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_OK_Integer4 = {
	"OK-Integer4",
	"OK-Integer4",
	OK_Integer4_free,
	OK_Integer4_print,
	OK_Integer4_constraint,
	OK_Integer4_decode_ber,
	OK_Integer4_encode_der,
	OK_Integer4_decode_xer,
	OK_Integer4_encode_xer,
	0, 0,	/* No PER support, use "-gen-PER" to enable */
	0, 0,	/* No APER */
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_OK_Integer4_tags_1,
	sizeof(asn_DEF_OK_Integer4_tags_1)
		/sizeof(asn_DEF_OK_Integer4_tags_1[0]), /* 1 */
	asn_DEF_OK_Integer4_tags_1,	/* Same as above */
	sizeof(asn_DEF_OK_Integer4_tags_1)
		/sizeof(asn_DEF_OK_Integer4_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [NO-Integer5] >>> ***/

#include <NativeInteger.h>

/*** <<< TYPE-DECLS [NO-Integer5] >>> ***/

typedef long	 NO_Integer5_t;

/*** <<< FUNC-DECLS [NO-Integer5] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_NO_Integer5;
asn_struct_free_f NO_Integer5_free;
asn_struct_print_f NO_Integer5_print;
asn_constr_check_f NO_Integer5_constraint;
ber_type_decoder_f NO_Integer5_decode_ber;
der_type_encoder_f NO_Integer5_encode_der;
xer_type_decoder_f NO_Integer5_decode_xer;
xer_type_encoder_f NO_Integer5_encode_xer;

/*** <<< CODE [NO-Integer5] >>> ***/

int
NO_Integer5_constraint(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	
	if(1 /* No applicable constraints whatsoever */) {
		/* Nothing is here. See below */
	}
	
	/* Replace with underlying type checker */
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	return td->check_constraints(td, sptr, ctfailcb, app_key);
}

/*
 * This type is implemented using NativeInteger,
 * so here we adjust the DEF accordingly.
 */
static void
NO_Integer5_1_inherit_TYPE_descriptor(asn_TYPE_descriptor_t *td) {
	td->free_struct    = asn_DEF_NativeInteger.free_struct;
	td->print_struct   = asn_DEF_NativeInteger.print_struct;
	td->check_constraints = asn_DEF_NativeInteger.check_constraints;
	td->ber_decoder    = asn_DEF_NativeInteger.ber_decoder;
	td->der_encoder    = asn_DEF_NativeInteger.der_encoder;
	td->xer_decoder    = asn_DEF_NativeInteger.xer_decoder;
	td->xer_encoder    = asn_DEF_NativeInteger.xer_encoder;
	td->elements       = asn_DEF_NativeInteger.elements;
	td->elements_count = asn_DEF_NativeInteger.elements_count;
	td->specifics      = asn_DEF_NativeInteger.specifics;
}

void
NO_Integer5_free(asn_TYPE_descriptor_t *td,
		void *struct_ptr, int contents_only) {
	NO_Integer5_1_inherit_TYPE_descriptor(td);
	td->free_struct(td, struct_ptr, contents_only);
}

int
NO_Integer5_print(asn_TYPE_descriptor_t *td, const void *struct_ptr,
		int ilevel, asn_app_consume_bytes_f *cb, void *app_key) {
	NO_Integer5_1_inherit_TYPE_descriptor(td);
	return td->print_struct(td, struct_ptr, ilevel, cb, app_key);
}

asn_dec_rval_t
NO_Integer5_decode_ber(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const void *bufptr, size_t size, int tag_mode) {
	NO_Integer5_1_inherit_TYPE_descriptor(td);
	return td->ber_decoder(opt_codec_ctx, td, structure, bufptr, size, tag_mode);
}

asn_enc_rval_t
NO_Integer5_encode_der(asn_TYPE_descriptor_t *td,
		void *structure, int tag_mode, ber_tlv_tag_t tag,
		asn_app_consume_bytes_f *cb, void *app_key) {
	NO_Integer5_1_inherit_TYPE_descriptor(td);
	return td->der_encoder(td, structure, tag_mode, tag, cb, app_key);
}

asn_dec_rval_t
NO_Integer5_decode_xer(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const char *opt_mname, const void *bufptr, size_t size) {
	NO_Integer5_1_inherit_TYPE_descriptor(td);
	return td->xer_decoder(opt_codec_ctx, td, structure, opt_mname, bufptr, size);
}

asn_enc_rval_t
NO_Integer5_encode_xer(asn_TYPE_descriptor_t *td, void *structure,
		int ilevel, enum xer_encoder_flags_e flags,
		asn_app_consume_bytes_f *cb, void *app_key) {
	NO_Integer5_1_inherit_TYPE_descriptor(td);
	return td->xer_encoder(td, structure, ilevel, flags, cb, app_key);
}


/*** <<< STAT-DEFS [NO-Integer5] >>> ***/

static const ber_tlv_tag_t asn_DEF_NO_Integer5_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_NO_Integer5 = {
	"NO-Integer5",
	"NO-Integer5",
	NO_Integer5_free,
	NO_Integer5_print,
	NO_Integer5_constraint,
	NO_Integer5_decode_ber,
	NO_Integer5_encode_der,
	NO_Integer5_decode_xer,
	NO_Integer5_encode_xer,
	0, 0,	/* No PER support, use "-gen-PER" to enable */
	0, 0,	/* No APER */
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_NO_Integer5_tags_1,
	sizeof(asn_DEF_NO_Integer5_tags_1)
		/sizeof(asn_DEF_NO_Integer5_tags_1[0]), /* 1 */
	asn_DEF_NO_Integer5_tags_1,	/* Same as above */
	sizeof(asn_DEF_NO_Integer5_tags_1)
		/sizeof(asn_DEF_NO_Integer5_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	0, 0,	/* No members */
	0	/* No specifics */
};

