
/*** <<< INCLUDES [MinMax] >>> ***/

#include <INTEGER.h>

/*** <<< TYPE-DECLS [MinMax] >>> ***/

typedef INTEGER_t	 MinMax_16P0_t;

/*** <<< FUNC-DECLS [MinMax] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_MinMax_16P0;
asn_struct_free_f MinMax_16P0_free;
asn_struct_print_f MinMax_16P0_print;
asn_constr_check_f MinMax_16P0_constraint;
ber_type_decoder_f MinMax_16P0_decode_ber;
der_type_encoder_f MinMax_16P0_encode_der;
xer_type_decoder_f MinMax_16P0_decode_xer;
xer_type_encoder_f MinMax_16P0_encode_xer;

/*** <<< CODE [MinMax] >>> ***/

int
MinMax_16P0_constraint(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	const INTEGER_t *st = (const INTEGER_t *)sptr;
	long long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	if(asn_INTEGER2long(st, &value)) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value too large (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	if((value >= 3LL)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

/*
 * This type is implemented using INTEGER,
 * so here we adjust the DEF accordingly.
 */
static void
MinMax_16P0_1_inherit_TYPE_descriptor(asn_TYPE_descriptor_t *td) {
	td->free_struct    = asn_DEF_INTEGER.free_struct;
	td->print_struct   = asn_DEF_INTEGER.print_struct;
	td->check_constraints = asn_DEF_INTEGER.check_constraints;
	td->ber_decoder    = asn_DEF_INTEGER.ber_decoder;
	td->der_encoder    = asn_DEF_INTEGER.der_encoder;
	td->xer_decoder    = asn_DEF_INTEGER.xer_decoder;
	td->xer_encoder    = asn_DEF_INTEGER.xer_encoder;
	td->uper_decoder   = asn_DEF_INTEGER.uper_decoder;
	td->uper_encoder   = asn_DEF_INTEGER.uper_encoder;
	if(!td->per_constraints)
		td->per_constraints = asn_DEF_INTEGER.per_constraints;
	td->elements       = asn_DEF_INTEGER.elements;
	td->elements_count = asn_DEF_INTEGER.elements_count;
	td->specifics      = asn_DEF_INTEGER.specifics;
}

void
MinMax_16P0_free(asn_TYPE_descriptor_t *td,
		void *struct_ptr, int contents_only) {
	MinMax_16P0_1_inherit_TYPE_descriptor(td);
	td->free_struct(td, struct_ptr, contents_only);
}

int
MinMax_16P0_print(asn_TYPE_descriptor_t *td, const void *struct_ptr,
		int ilevel, asn_app_consume_bytes_f *cb, void *app_key) {
	MinMax_16P0_1_inherit_TYPE_descriptor(td);
	return td->print_struct(td, struct_ptr, ilevel, cb, app_key);
}

asn_dec_rval_t
MinMax_16P0_decode_ber(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const void *bufptr, size_t size, int tag_mode) {
	MinMax_16P0_1_inherit_TYPE_descriptor(td);
	return td->ber_decoder(opt_codec_ctx, td, structure, bufptr, size, tag_mode);
}

asn_enc_rval_t
MinMax_16P0_encode_der(asn_TYPE_descriptor_t *td,
		void *structure, int tag_mode, ber_tlv_tag_t tag,
		asn_app_consume_bytes_f *cb, void *app_key) {
	MinMax_16P0_1_inherit_TYPE_descriptor(td);
	return td->der_encoder(td, structure, tag_mode, tag, cb, app_key);
}

asn_dec_rval_t
MinMax_16P0_decode_xer(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const char *opt_mname, const void *bufptr, size_t size) {
	MinMax_16P0_1_inherit_TYPE_descriptor(td);
	return td->xer_decoder(opt_codec_ctx, td, structure, opt_mname, bufptr, size);
}

asn_enc_rval_t
MinMax_16P0_encode_xer(asn_TYPE_descriptor_t *td, void *structure,
		int ilevel, enum xer_encoder_flags_e flags,
		asn_app_consume_bytes_f *cb, void *app_key) {
	MinMax_16P0_1_inherit_TYPE_descriptor(td);
	return td->xer_encoder(td, structure, ilevel, flags, cb, app_key);
}


/*** <<< STAT-DEFS [MinMax] >>> ***/

static const ber_tlv_tag_t asn_DEF_MinMax_16P0_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_MinMax_16P0 = {
	"MinMax",
	"MinMax",
	MinMax_16P0_free,
	MinMax_16P0_print,
	MinMax_16P0_constraint,
	MinMax_16P0_decode_ber,
	MinMax_16P0_encode_der,
	MinMax_16P0_decode_xer,
	MinMax_16P0_encode_xer,
	0, 0,	/* No PER support, use "-gen-PER" to enable */
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_MinMax_16P0_tags_1,
	sizeof(asn_DEF_MinMax_16P0_tags_1)
		/sizeof(asn_DEF_MinMax_16P0_tags_1[0]), /* 1 */
	asn_DEF_MinMax_16P0_tags_1,	/* Same as above */
	sizeof(asn_DEF_MinMax_16P0_tags_1)
		/sizeof(asn_DEF_MinMax_16P0_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	0, 0,	/* No members */
	0	/* No specifics */
};


/*** <<< INCLUDES [ThreePlus] >>> ***/

#include "MinMax.h"

/*** <<< TYPE-DECLS [ThreePlus] >>> ***/

typedef MinMax_16P0_t	 ThreePlus_t;

/*** <<< FUNC-DECLS [ThreePlus] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_ThreePlus;
asn_struct_free_f ThreePlus_free;
asn_struct_print_f ThreePlus_print;
asn_constr_check_f ThreePlus_constraint;
ber_type_decoder_f ThreePlus_decode_ber;
der_type_encoder_f ThreePlus_encode_der;
xer_type_decoder_f ThreePlus_decode_xer;
xer_type_encoder_f ThreePlus_encode_xer;

/*** <<< CODE [ThreePlus] >>> ***/

int
ThreePlus_constraint(asn_TYPE_descriptor_t *td, const void *sptr,
			asn_app_constraint_failed_f *ctfailcb, void *app_key) {
	const MinMax_16P0_t *st = (const MinMax_16P0_t *)sptr;
	long long value;
	
	if(!sptr) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value not given (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	if(asn_INTEGER2long(st, &value)) {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: value too large (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
	
	if((value >= 3LL)) {
		/* Constraint check succeeded */
		return 0;
	} else {
		ASN__CTFAIL(app_key, td, sptr,
			"%s: constraint failed (%s:%d)",
			td->name, __FILE__, __LINE__);
		return -1;
	}
}

/*
 * This type is implemented using MinMax_16P0,
 * so here we adjust the DEF accordingly.
 */
static void
ThreePlus_1_inherit_TYPE_descriptor(asn_TYPE_descriptor_t *td) {
	td->free_struct    = asn_DEF_MinMax_16P0.free_struct;
	td->print_struct   = asn_DEF_MinMax_16P0.print_struct;
	td->check_constraints = asn_DEF_MinMax_16P0.check_constraints;
	td->ber_decoder    = asn_DEF_MinMax_16P0.ber_decoder;
	td->der_encoder    = asn_DEF_MinMax_16P0.der_encoder;
	td->xer_decoder    = asn_DEF_MinMax_16P0.xer_decoder;
	td->xer_encoder    = asn_DEF_MinMax_16P0.xer_encoder;
	td->uper_decoder   = asn_DEF_MinMax_16P0.uper_decoder;
	td->uper_encoder   = asn_DEF_MinMax_16P0.uper_encoder;
	if(!td->per_constraints)
		td->per_constraints = asn_DEF_MinMax_16P0.per_constraints;
	td->elements       = asn_DEF_MinMax_16P0.elements;
	td->elements_count = asn_DEF_MinMax_16P0.elements_count;
	td->specifics      = asn_DEF_MinMax_16P0.specifics;
}

void
ThreePlus_free(asn_TYPE_descriptor_t *td,
		void *struct_ptr, int contents_only) {
	ThreePlus_1_inherit_TYPE_descriptor(td);
	td->free_struct(td, struct_ptr, contents_only);
}

int
ThreePlus_print(asn_TYPE_descriptor_t *td, const void *struct_ptr,
		int ilevel, asn_app_consume_bytes_f *cb, void *app_key) {
	ThreePlus_1_inherit_TYPE_descriptor(td);
	return td->print_struct(td, struct_ptr, ilevel, cb, app_key);
}

asn_dec_rval_t
ThreePlus_decode_ber(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const void *bufptr, size_t size, int tag_mode) {
	ThreePlus_1_inherit_TYPE_descriptor(td);
	return td->ber_decoder(opt_codec_ctx, td, structure, bufptr, size, tag_mode);
}

asn_enc_rval_t
ThreePlus_encode_der(asn_TYPE_descriptor_t *td,
		void *structure, int tag_mode, ber_tlv_tag_t tag,
		asn_app_consume_bytes_f *cb, void *app_key) {
	ThreePlus_1_inherit_TYPE_descriptor(td);
	return td->der_encoder(td, structure, tag_mode, tag, cb, app_key);
}

asn_dec_rval_t
ThreePlus_decode_xer(asn_codec_ctx_t *opt_codec_ctx, asn_TYPE_descriptor_t *td,
		void **structure, const char *opt_mname, const void *bufptr, size_t size) {
	ThreePlus_1_inherit_TYPE_descriptor(td);
	return td->xer_decoder(opt_codec_ctx, td, structure, opt_mname, bufptr, size);
}

asn_enc_rval_t
ThreePlus_encode_xer(asn_TYPE_descriptor_t *td, void *structure,
		int ilevel, enum xer_encoder_flags_e flags,
		asn_app_consume_bytes_f *cb, void *app_key) {
	ThreePlus_1_inherit_TYPE_descriptor(td);
	return td->xer_encoder(td, structure, ilevel, flags, cb, app_key);
}


/*** <<< STAT-DEFS [ThreePlus] >>> ***/

static const ber_tlv_tag_t asn_DEF_ThreePlus_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (2 << 2))
};
asn_TYPE_descriptor_t asn_DEF_ThreePlus = {
	"ThreePlus",
	"ThreePlus",
	ThreePlus_free,
	ThreePlus_print,
	ThreePlus_constraint,
	ThreePlus_decode_ber,
	ThreePlus_encode_der,
	ThreePlus_decode_xer,
	ThreePlus_encode_xer,
	0, 0,	/* No PER support, use "-gen-PER" to enable */
	0,	/* Use generic outmost tag fetcher */
	asn_DEF_ThreePlus_tags_1,
	sizeof(asn_DEF_ThreePlus_tags_1)
		/sizeof(asn_DEF_ThreePlus_tags_1[0]), /* 1 */
	asn_DEF_ThreePlus_tags_1,	/* Same as above */
	sizeof(asn_DEF_ThreePlus_tags_1)
		/sizeof(asn_DEF_ThreePlus_tags_1[0]), /* 1 */
	0,	/* No PER visible constraints */
	0, 0,	/* No members */
	0	/* No specifics */
};

