
/*** <<< INCLUDES [Choice] >>> ***/

#include <RELATIVE-OID.h>
#include <BIT_STRING.h>
#include <BOOLEAN.h>
#include <NULL.h>
#include <NativeInteger.h>
#include <constr_CHOICE.h>

/*** <<< DEPS [Choice] >>> ***/

typedef enum Choice_PR {
	Choice_PR_NOTHING,	/* No components present */
	Choice_PR_roid,
	Choice_PR_bitstr,
	Choice_PR_ch,
	/* Extensions may appear below */
	Choice_PR_bool
} Choice_PR;
typedef enum ch_PR {
	ch_PR_NOTHING,	/* No components present */
	ch_PR_null,
	ch_PR_int
} ch_PR;

/*** <<< TYPE-DECLS [Choice] >>> ***/

typedef struct Choice {
	Choice_PR present;
	union Choice_u {
		RELATIVE_OID_t	 roid;
		BIT_STRING_t	 bitstr;
		struct ch {
			ch_PR present;
			union Choice__ch_u {
				NULL_t	 null;
				long	 Int;
			} choice;
			
			/* Context for parsing across buffer boundaries */
			asn_struct_ctx_t _asn_ctx;
		} ch;
		/*
		 * This type is extensible,
		 * possible extensions are below.
		 */
		BOOLEAN_t	 Bool;
	} choice;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Choice_t;

/*** <<< FUNC-DECLS [Choice] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Choice;

/*** <<< CTDEFS [Choice] >>> ***/

static asn_per_constraints_t asn_PER_type_ch_constr_4 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 1,  1,  0,  1 }	/* (0..1) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};
static asn_per_constraints_t asn_PER_type_Choice_constr_1 CC_NOTUSED = {
	{ APC_CONSTRAINED | APC_EXTENSIBLE,  2,  2,  0,  2 }	/* (0..2,...) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [Choice] >>> ***/

static asn_TYPE_member_t asn_MBR_ch_4[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct ch, choice.null),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (5 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NULL,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "null"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct ch, choice.Int),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "int"
		},
};
static const unsigned asn_MAP_ch_to_canonical_4[] = { 1, 0 };
static const unsigned asn_MAP_ch_from_canonical_4[] = { 1, 0 };
static const asn_TYPE_tag2member_t asn_MAP_ch_tag2el_4[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 1, 0, 0 }, /* int */
    { (ASN_TAG_CLASS_UNIVERSAL | (5 << 2)), 0, 0, 0 } /* null */
};
static asn_CHOICE_specifics_t asn_SPC_ch_specs_4 = {
	sizeof(struct ch),
	offsetof(struct ch, _asn_ctx),
	offsetof(struct ch, present),
	sizeof(((struct ch *)0)->present),
	.tag2el = asn_MAP_ch_tag2el_4,
	.tag2el_count = 2,	/* Count of tags in the map */
	.to_canonical_order = asn_MAP_ch_to_canonical_4,
	.from_canonical_order = asn_MAP_ch_from_canonical_4,
	.first_extension = -1	/* Extensions start */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_ch_4 = {
	"ch",
	"ch",
	&asn_OP_CHOICE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{ 0, &asn_PER_type_ch_constr_4, CHOICE_constraint },
	asn_MBR_ch_4,
	2,	/* Elements count */
	&asn_SPC_ch_specs_4	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_Choice_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Choice, choice.roid),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (13 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_RELATIVE_OID,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "roid"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Choice, choice.bitstr),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (3 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_BIT_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "bitstr"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Choice, choice.ch),
		.tag = -1 /* Ambiguous tag (CHOICE?) */,
		.tag_mode = 0,
		.type = &asn_DEF_ch_4,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "ch"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Choice, choice.Bool),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (1 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_BOOLEAN,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "bool"
		},
};
static const unsigned asn_MAP_Choice_to_canonical_1[] = { 2, 1, 0, 3 };
static const unsigned asn_MAP_Choice_from_canonical_1[] = { 2, 1, 0, 3 };
static const asn_TYPE_tag2member_t asn_MAP_Choice_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (1 << 2)), 3, 0, 0 }, /* bool */
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 2, 0, 0 }, /* int */
    { (ASN_TAG_CLASS_UNIVERSAL | (3 << 2)), 1, 0, 0 }, /* bitstr */
    { (ASN_TAG_CLASS_UNIVERSAL | (5 << 2)), 2, 0, 0 }, /* null */
    { (ASN_TAG_CLASS_UNIVERSAL | (13 << 2)), 0, 0, 0 } /* roid */
};
static asn_CHOICE_specifics_t asn_SPC_Choice_specs_1 = {
	sizeof(struct Choice),
	offsetof(struct Choice, _asn_ctx),
	offsetof(struct Choice, present),
	sizeof(((struct Choice *)0)->present),
	.tag2el = asn_MAP_Choice_tag2el_1,
	.tag2el_count = 5,	/* Count of tags in the map */
	.to_canonical_order = asn_MAP_Choice_to_canonical_1,
	.from_canonical_order = asn_MAP_Choice_from_canonical_1,
	.first_extension = 3	/* Extensions start */
};
asn_TYPE_descriptor_t asn_DEF_Choice = {
	"Choice",
	"Choice",
	&asn_OP_CHOICE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{ 0, &asn_PER_type_Choice_constr_1, CHOICE_constraint },
	asn_MBR_Choice_1,
	4,	/* Elements count */
	&asn_SPC_Choice_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [Choice2] >>> ***/

#include <BIT_STRING.h>
#include <RELATIVE-OID.h>
#include <constr_CHOICE.h>

/*** <<< DEPS [Choice2] >>> ***/

typedef enum Choice2_PR {
	Choice2_PR_NOTHING,	/* No components present */
	Choice2_PR_bitstr,
	Choice2_PR_roid
} Choice2_PR;

/*** <<< TYPE-DECLS [Choice2] >>> ***/

typedef struct Choice2 {
	Choice2_PR present;
	union Choice2_u {
		BIT_STRING_t	 bitstr;
		RELATIVE_OID_t	 roid;
	} choice;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} Choice2_t;

/*** <<< FUNC-DECLS [Choice2] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_Choice2;

/*** <<< CTDEFS [Choice2] >>> ***/

static asn_per_constraints_t asn_PER_type_Choice2_constr_1 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 1,  1,  0,  1 }	/* (0..1) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [Choice2] >>> ***/

static asn_TYPE_member_t asn_MBR_Choice2_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Choice2, choice.bitstr),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = +1,	/* EXPLICIT tag at current level */
		.type = &asn_DEF_BIT_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "bitstr"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct Choice2, choice.roid),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = +1,	/* EXPLICIT tag at current level */
		.type = &asn_DEF_RELATIVE_OID,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "roid"
		},
};
static const asn_TYPE_tag2member_t asn_MAP_Choice2_tag2el_1[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* bitstr */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 } /* roid */
};
static asn_CHOICE_specifics_t asn_SPC_Choice2_specs_1 = {
	sizeof(struct Choice2),
	offsetof(struct Choice2, _asn_ctx),
	offsetof(struct Choice2, present),
	sizeof(((struct Choice2 *)0)->present),
	.tag2el = asn_MAP_Choice2_tag2el_1,
	.tag2el_count = 2,	/* Count of tags in the map */
	0, 0,
	.first_extension = -1	/* Extensions start */
};
asn_TYPE_descriptor_t asn_DEF_Choice2 = {
	"Choice2",
	"Choice2",
	&asn_OP_CHOICE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{ 0, &asn_PER_type_Choice2_constr_1, CHOICE_constraint },
	asn_MBR_Choice2_1,
	2,	/* Elements count */
	&asn_SPC_Choice2_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [EXTERNAL] >>> ***/

#include <OBJECT_IDENTIFIER.h>
#include <NativeInteger.h>
#include <ObjectDescriptor.h>
#include <ANY.h>
#include <OCTET_STRING.h>
#include <BIT_STRING.h>
#include <constr_CHOICE.h>
#include <constr_SEQUENCE.h>

/*** <<< DEPS [EXTERNAL] >>> ***/

typedef enum encoding_PR {
	encoding_PR_NOTHING,	/* No components present */
	encoding_PR_single_ASN1_type,
	encoding_PR_octet_aligned,
	encoding_PR_arbitrary
} encoding_PR;

/*** <<< TYPE-DECLS [EXTERNAL] >>> ***/

typedef struct EXTERNAL {
	OBJECT_IDENTIFIER_t	*direct_reference	/* OPTIONAL */;
	long	*indirect_reference	/* OPTIONAL */;
	ObjectDescriptor_t	*data_value_descriptor	/* OPTIONAL */;
	struct encoding {
		encoding_PR present;
		union EXTERNAL__encoding_u {
			ANY_t	 single_ASN1_type;
			OCTET_STRING_t	 octet_aligned;
			BIT_STRING_t	 arbitrary;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} encoding;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} EXTERNAL_t;

/*** <<< FUNC-DECLS [EXTERNAL] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_EXTERNAL;

/*** <<< CTDEFS [EXTERNAL] >>> ***/

static asn_per_constraints_t asn_PER_type_encoding_constr_5 CC_NOTUSED = {
	{ APC_CONSTRAINED,	 2,  2,  0,  2 }	/* (0..2) */,
	{ APC_UNCONSTRAINED,	-1, -1,  0,  0 },
	0, 0	/* No PER value map */
};

/*** <<< STAT-DEFS [EXTERNAL] >>> ***/

static asn_TYPE_member_t asn_MBR_encoding_5[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct encoding, choice.single_ASN1_type),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = +1,	/* EXPLICIT tag at current level */
		.type = &asn_DEF_ANY,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "single-ASN1-type"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct encoding, choice.octet_aligned),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "octet-aligned"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct encoding, choice.arbitrary),
		.tag = (ASN_TAG_CLASS_CONTEXT | (2 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_BIT_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "arbitrary"
		},
};
static const asn_TYPE_tag2member_t asn_MAP_encoding_tag2el_5[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* single-ASN1-type */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 }, /* octet-aligned */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 2, 0, 0 } /* arbitrary */
};
static asn_CHOICE_specifics_t asn_SPC_encoding_specs_5 = {
	sizeof(struct encoding),
	offsetof(struct encoding, _asn_ctx),
	offsetof(struct encoding, present),
	sizeof(((struct encoding *)0)->present),
	.tag2el = asn_MAP_encoding_tag2el_5,
	.tag2el_count = 3,	/* Count of tags in the map */
	0, 0,
	.first_extension = -1	/* Extensions start */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_encoding_5 = {
	"encoding",
	"encoding",
	&asn_OP_CHOICE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{ 0, &asn_PER_type_encoding_constr_5, CHOICE_constraint },
	asn_MBR_encoding_5,
	3,	/* Elements count */
	&asn_SPC_encoding_specs_5	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_EXTERNAL_1[] = {
	{ ATF_POINTER, 3, offsetof(struct EXTERNAL, direct_reference),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (6 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_OBJECT_IDENTIFIER,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "direct-reference"
		},
	{ ATF_POINTER, 2, offsetof(struct EXTERNAL, indirect_reference),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_NativeInteger,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "indirect-reference"
		},
	{ ATF_POINTER, 1, offsetof(struct EXTERNAL, data_value_descriptor),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (7 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_ObjectDescriptor,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "data-value-descriptor"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct EXTERNAL, encoding),
		.tag = -1 /* Ambiguous tag (CHOICE?) */,
		.tag_mode = 0,
		.type = &asn_DEF_encoding_5,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "encoding"
		},
};
static const int asn_MAP_EXTERNAL_oms_1[] = { 0, 1, 2 };
static const ber_tlv_tag_t asn_DEF_EXTERNAL_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (8 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_EXTERNAL_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 1, 0, 0 }, /* indirect-reference */
    { (ASN_TAG_CLASS_UNIVERSAL | (6 << 2)), 0, 0, 0 }, /* direct-reference */
    { (ASN_TAG_CLASS_UNIVERSAL | (7 << 2)), 2, 0, 0 }, /* data-value-descriptor */
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 3, 0, 0 }, /* single-ASN1-type */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 3, 0, 0 }, /* octet-aligned */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 3, 0, 0 } /* arbitrary */
};
static asn_SEQUENCE_specifics_t asn_SPC_EXTERNAL_specs_1 = {
	sizeof(struct EXTERNAL),
	offsetof(struct EXTERNAL, _asn_ctx),
	.tag2el = asn_MAP_EXTERNAL_tag2el_1,
	.tag2el_count = 6,	/* Count of tags in the map */
	asn_MAP_EXTERNAL_oms_1,	/* Optional members */
	3, 0,	/* Root/Additions */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_EXTERNAL = {
	"EXTERNAL",
	"EXTERNAL",
	&asn_OP_SEQUENCE,
	asn_DEF_EXTERNAL_tags_1,
	sizeof(asn_DEF_EXTERNAL_tags_1)
		/sizeof(asn_DEF_EXTERNAL_tags_1[0]) - 1, /* 1 */
	asn_DEF_EXTERNAL_tags_1,	/* Same as above */
	sizeof(asn_DEF_EXTERNAL_tags_1)
		/sizeof(asn_DEF_EXTERNAL_tags_1[0]), /* 2 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_EXTERNAL_1,
	4,	/* Elements count */
	&asn_SPC_EXTERNAL_specs_1	/* Additional specs */
};

