
/*** <<< INCLUDES [SIGNED] >>> ***/

#include <REAL.h>
#include <constr_SEQUENCE.h>
#include <INTEGER.h>
#include <constr_SET.h>

/*** <<< DEPS [SIGNED] >>> ***/


/*
 * Method of determining the components presence
 */
typedef enum signed_PR {
	signed_PR_a,	/* Member a is present */
} signed_PR;

/*** <<< TYPE-DECLS [SIGNED] >>> ***/

typedef struct SIGNED_16P0 {
	REAL_t	 Signed;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} SIGNED_16P0_t;
typedef struct SIGNED_16P1 {
	struct Signed {
		INTEGER_t	 a;
		
		/* Presence bitmask: ASN_SET_ISPRESENT(psigned, signed_PR_x) */
		unsigned int _presence_map
			[((1+(8*sizeof(unsigned int))-1)/(8*sizeof(unsigned int)))];
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} Signed;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} SIGNED_16P1_t;

/*** <<< FUNC-DECLS [SIGNED] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_SIGNED_16P0;
extern asn_SEQUENCE_specifics_t asn_SPC_SIGNED_16P0_specs_1;
extern asn_TYPE_member_t asn_MBR_SIGNED_16P0_1[1];
extern asn_TYPE_descriptor_t asn_DEF_SIGNED_16P1;
extern asn_SEQUENCE_specifics_t asn_SPC_SIGNED_16P1_specs_3;
extern asn_TYPE_member_t asn_MBR_SIGNED_16P1_3[1];

/*** <<< STAT-DEFS [SIGNED] >>> ***/

asn_TYPE_member_t asn_MBR_SIGNED_16P0_1[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct SIGNED_16P0, Signed),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (9 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_REAL,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "signed"
		},
};
static const ber_tlv_tag_t asn_DEF_SIGNED_16P0_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_SIGNED_16P0_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (9 << 2)), 0, 0, 0 } /* signed */
};
asn_SEQUENCE_specifics_t asn_SPC_SIGNED_16P0_specs_1 = {
	sizeof(struct SIGNED_16P0),
	offsetof(struct SIGNED_16P0, _asn_ctx),
	.tag2el = asn_MAP_SIGNED_16P0_tag2el_1,
	.tag2el_count = 1,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_SIGNED_16P0 = {
	"SIGNED",
	"SIGNED",
	&asn_OP_SEQUENCE,
	asn_DEF_SIGNED_16P0_tags_1,
	sizeof(asn_DEF_SIGNED_16P0_tags_1)
		/sizeof(asn_DEF_SIGNED_16P0_tags_1[0]), /* 1 */
	asn_DEF_SIGNED_16P0_tags_1,	/* Same as above */
	sizeof(asn_DEF_SIGNED_16P0_tags_1)
		/sizeof(asn_DEF_SIGNED_16P0_tags_1[0]), /* 1 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_SIGNED_16P0_1,
	1,	/* Elements count */
	&asn_SPC_SIGNED_16P0_specs_1	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_signed_4[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct Signed, a),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_INTEGER,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "a"
		},
};
static const ber_tlv_tag_t asn_DEF_signed_tags_4[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (17 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_signed_tag2el_4[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 0, 0, 0 } /* a */
};
static const uint8_t asn_MAP_signed_mmap_4[(1 + (8 * sizeof(unsigned int)) - 1) / 8] = {
	(1 << 7)
};
static 
asn_SET_specifics_t asn_SPC_signed_specs_4 = {
	sizeof(struct Signed),
	offsetof(struct Signed, _asn_ctx),
	offsetof(struct Signed, _presence_map),
	.tag2el = asn_MAP_signed_tag2el_4,
	.tag2el_count = 1,	/* Count of tags in the map */
	asn_MAP_signed_tag2el_4,	/* Same as above */
	1,	/* Count of tags in the CXER map */
	0,	/* Whether extensible */
	(const unsigned int *)asn_MAP_signed_mmap_4	/* Mandatory elements map */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_signed_4 = {
	"signed",
	"signed",
	&asn_OP_SET,
	asn_DEF_signed_tags_4,
	sizeof(asn_DEF_signed_tags_4)
		/sizeof(asn_DEF_signed_tags_4[0]), /* 1 */
	asn_DEF_signed_tags_4,	/* Same as above */
	sizeof(asn_DEF_signed_tags_4)
		/sizeof(asn_DEF_signed_tags_4[0]), /* 1 */
	{ 0, 0, SET_constraint },
	asn_MBR_signed_4,
	1,	/* Elements count */
	&asn_SPC_signed_specs_4	/* Additional specs */
};

asn_TYPE_member_t asn_MBR_SIGNED_16P1_3[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct SIGNED_16P1, Signed),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (17 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_signed_4,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "signed"
		},
};
static const ber_tlv_tag_t asn_DEF_SIGNED_16P1_tags_3[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_SIGNED_16P1_tag2el_3[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (17 << 2)), 0, 0, 0 } /* signed */
};
asn_SEQUENCE_specifics_t asn_SPC_SIGNED_16P1_specs_3 = {
	sizeof(struct SIGNED_16P1),
	offsetof(struct SIGNED_16P1, _asn_ctx),
	.tag2el = asn_MAP_SIGNED_16P1_tag2el_3,
	.tag2el_count = 1,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_SIGNED_16P1 = {
	"SIGNED",
	"SIGNED",
	&asn_OP_SEQUENCE,
	asn_DEF_SIGNED_16P1_tags_3,
	sizeof(asn_DEF_SIGNED_16P1_tags_3)
		/sizeof(asn_DEF_SIGNED_16P1_tags_3[0]), /* 1 */
	asn_DEF_SIGNED_16P1_tags_3,	/* Same as above */
	sizeof(asn_DEF_SIGNED_16P1_tags_3)
		/sizeof(asn_DEF_SIGNED_16P1_tags_3[0]), /* 1 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_SIGNED_16P1_3,
	1,	/* Elements count */
	&asn_SPC_SIGNED_16P1_specs_3	/* Additional specs */
};


/*** <<< INCLUDES [SignedREAL] >>> ***/

#include "SIGNED.h"

/*** <<< TYPE-DECLS [SignedREAL] >>> ***/

typedef SIGNED_16P0_t	 SignedREAL_t;

/*** <<< FUNC-DECLS [SignedREAL] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_SignedREAL;
asn_struct_free_f SignedREAL_free;
asn_struct_print_f SignedREAL_print;
asn_constr_check_f SignedREAL_constraint;
ber_type_decoder_f SignedREAL_decode_ber;
der_type_encoder_f SignedREAL_encode_der;
xer_type_decoder_f SignedREAL_decode_xer;
xer_type_encoder_f SignedREAL_encode_xer;

/*** <<< CODE [SignedREAL] >>> ***/

/*
 * This type is implemented using SIGNED_16P0,
 * so here we adjust the DEF accordingly.
 */

/*** <<< STAT-DEFS [SignedREAL] >>> ***/

static const ber_tlv_tag_t asn_DEF_SignedREAL_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
asn_TYPE_descriptor_t asn_DEF_SignedREAL = {
	"SignedREAL",
	"SignedREAL",
	&asn_OP_SEQUENCE,
	asn_DEF_SignedREAL_tags_1,
	sizeof(asn_DEF_SignedREAL_tags_1)
		/sizeof(asn_DEF_SignedREAL_tags_1[0]), /* 1 */
	asn_DEF_SignedREAL_tags_1,	/* Same as above */
	sizeof(asn_DEF_SignedREAL_tags_1)
		/sizeof(asn_DEF_SignedREAL_tags_1[0]), /* 1 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_SIGNED_16P0_1,
	1,	/* Elements count */
	&asn_SPC_SIGNED_16P0_specs_1	/* Additional specs */
};


/*** <<< INCLUDES [SignedSET] >>> ***/

#include "SIGNED.h"

/*** <<< TYPE-DECLS [SignedSET] >>> ***/

typedef SIGNED_16P1_t	 SignedSET_t;

/*** <<< FUNC-DECLS [SignedSET] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_SignedSET;
asn_struct_free_f SignedSET_free;
asn_struct_print_f SignedSET_print;
asn_constr_check_f SignedSET_constraint;
ber_type_decoder_f SignedSET_decode_ber;
der_type_encoder_f SignedSET_encode_der;
xer_type_decoder_f SignedSET_decode_xer;
xer_type_encoder_f SignedSET_encode_xer;

/*** <<< CODE [SignedSET] >>> ***/

/*
 * This type is implemented using SIGNED_16P1,
 * so here we adjust the DEF accordingly.
 */

/*** <<< STAT-DEFS [SignedSET] >>> ***/

static const ber_tlv_tag_t asn_DEF_SignedSET_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
asn_TYPE_descriptor_t asn_DEF_SignedSET = {
	"SignedSET",
	"SignedSET",
	&asn_OP_SEQUENCE,
	asn_DEF_SignedSET_tags_1,
	sizeof(asn_DEF_SignedSET_tags_1)
		/sizeof(asn_DEF_SignedSET_tags_1[0]), /* 1 */
	asn_DEF_SignedSET_tags_1,	/* Same as above */
	sizeof(asn_DEF_SignedSET_tags_1)
		/sizeof(asn_DEF_SignedSET_tags_1[0]), /* 1 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_SIGNED_16P1_3,
	1,	/* Elements count */
	&asn_SPC_SIGNED_16P1_specs_3	/* Additional specs */
};


/*** <<< INCLUDES [EXTERNAL] >>> ***/

#include <OBJECT_IDENTIFIER.h>
#include <INTEGER.h>
#include <ObjectDescriptor.h>
#include <ANY.h>
#include <OCTET_STRING.h>
#include <BIT_STRING.h>
#include <constr_CHOICE.h>
#include <constr_SEQUENCE.h>

/*** <<< DEPS [EXTERNAL] >>> ***/

typedef enum encoding_PR {
	encoding_PR_NOTHING,	/* No components present */
	encoding_PR_single_ASN1_type,
	encoding_PR_octet_aligned,
	encoding_PR_arbitrary
} encoding_PR;

/*** <<< TYPE-DECLS [EXTERNAL] >>> ***/

typedef struct EXTERNAL {
	OBJECT_IDENTIFIER_t	*direct_reference	/* OPTIONAL */;
	INTEGER_t	*indirect_reference	/* OPTIONAL */;
	ObjectDescriptor_t	*data_value_descriptor	/* OPTIONAL */;
	struct encoding {
		encoding_PR present;
		union EXTERNAL__encoding_u {
			ANY_t	 single_ASN1_type;
			OCTET_STRING_t	 octet_aligned;
			BIT_STRING_t	 arbitrary;
		} choice;
		
		/* Context for parsing across buffer boundaries */
		asn_struct_ctx_t _asn_ctx;
	} encoding;
	
	/* Context for parsing across buffer boundaries */
	asn_struct_ctx_t _asn_ctx;
} EXTERNAL_t;

/*** <<< FUNC-DECLS [EXTERNAL] >>> ***/

extern asn_TYPE_descriptor_t asn_DEF_EXTERNAL;

/*** <<< STAT-DEFS [EXTERNAL] >>> ***/

static asn_TYPE_member_t asn_MBR_encoding_5[] = {
	{ ATF_NOFLAGS, 0, offsetof(struct encoding, choice.single_ASN1_type),
		.tag = (ASN_TAG_CLASS_CONTEXT | (0 << 2)),
		.tag_mode = +1,	/* EXPLICIT tag at current level */
		.type = &asn_DEF_ANY,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "single-ASN1-type"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct encoding, choice.octet_aligned),
		.tag = (ASN_TAG_CLASS_CONTEXT | (1 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_OCTET_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "octet-aligned"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct encoding, choice.arbitrary),
		.tag = (ASN_TAG_CLASS_CONTEXT | (2 << 2)),
		.tag_mode = -1,	/* IMPLICIT tag at current level */
		.type = &asn_DEF_BIT_STRING,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "arbitrary"
		},
};
static const asn_TYPE_tag2member_t asn_MAP_encoding_tag2el_5[] = {
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 0, 0, 0 }, /* single-ASN1-type */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 1, 0, 0 }, /* octet-aligned */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 2, 0, 0 } /* arbitrary */
};
static asn_CHOICE_specifics_t asn_SPC_encoding_specs_5 = {
	sizeof(struct encoding),
	offsetof(struct encoding, _asn_ctx),
	offsetof(struct encoding, present),
	sizeof(((struct encoding *)0)->present),
	.tag2el = asn_MAP_encoding_tag2el_5,
	.tag2el_count = 3,	/* Count of tags in the map */
	0, 0,
	.first_extension = -1	/* Extensions start */
};
static /* Use -fall-defs-global to expose */
asn_TYPE_descriptor_t asn_DEF_encoding_5 = {
	"encoding",
	"encoding",
	&asn_OP_CHOICE,
	0,	/* No effective tags (pointer) */
	0,	/* No effective tags (count) */
	0,	/* No tags (pointer) */
	0,	/* No tags (count) */
	{ 0, 0, CHOICE_constraint },
	asn_MBR_encoding_5,
	3,	/* Elements count */
	&asn_SPC_encoding_specs_5	/* Additional specs */
};

static asn_TYPE_member_t asn_MBR_EXTERNAL_1[] = {
	{ ATF_POINTER, 3, offsetof(struct EXTERNAL, direct_reference),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (6 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_OBJECT_IDENTIFIER,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "direct-reference"
		},
	{ ATF_POINTER, 2, offsetof(struct EXTERNAL, indirect_reference),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_INTEGER,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "indirect-reference"
		},
	{ ATF_POINTER, 1, offsetof(struct EXTERNAL, data_value_descriptor),
		.tag = (ASN_TAG_CLASS_UNIVERSAL | (7 << 2)),
		.tag_mode = 0,
		.type = &asn_DEF_ObjectDescriptor,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "data-value-descriptor"
		},
	{ ATF_NOFLAGS, 0, offsetof(struct EXTERNAL, encoding),
		.tag = -1 /* Ambiguous tag (CHOICE?) */,
		.tag_mode = 0,
		.type = &asn_DEF_encoding_5,
		.type_selector = 0,
		{ .oer_constraints = 0, .per_constraints = 0, .general_constraints = 0 },
		0, 0, /* No default value */
		.name = "encoding"
		},
};
static const ber_tlv_tag_t asn_DEF_EXTERNAL_tags_1[] = {
	(ASN_TAG_CLASS_UNIVERSAL | (8 << 2)),
	(ASN_TAG_CLASS_UNIVERSAL | (16 << 2))
};
static const asn_TYPE_tag2member_t asn_MAP_EXTERNAL_tag2el_1[] = {
    { (ASN_TAG_CLASS_UNIVERSAL | (2 << 2)), 1, 0, 0 }, /* indirect-reference */
    { (ASN_TAG_CLASS_UNIVERSAL | (6 << 2)), 0, 0, 0 }, /* direct-reference */
    { (ASN_TAG_CLASS_UNIVERSAL | (7 << 2)), 2, 0, 0 }, /* data-value-descriptor */
    { (ASN_TAG_CLASS_CONTEXT | (0 << 2)), 3, 0, 0 }, /* single-ASN1-type */
    { (ASN_TAG_CLASS_CONTEXT | (1 << 2)), 3, 0, 0 }, /* octet-aligned */
    { (ASN_TAG_CLASS_CONTEXT | (2 << 2)), 3, 0, 0 } /* arbitrary */
};
static asn_SEQUENCE_specifics_t asn_SPC_EXTERNAL_specs_1 = {
	sizeof(struct EXTERNAL),
	offsetof(struct EXTERNAL, _asn_ctx),
	.tag2el = asn_MAP_EXTERNAL_tag2el_1,
	.tag2el_count = 6,	/* Count of tags in the map */
	0, 0, 0,	/* Optional elements (not needed) */
	-1,	/* First extension addition */
};
asn_TYPE_descriptor_t asn_DEF_EXTERNAL = {
	"EXTERNAL",
	"EXTERNAL",
	&asn_OP_SEQUENCE,
	asn_DEF_EXTERNAL_tags_1,
	sizeof(asn_DEF_EXTERNAL_tags_1)
		/sizeof(asn_DEF_EXTERNAL_tags_1[0]) - 1, /* 1 */
	asn_DEF_EXTERNAL_tags_1,	/* Same as above */
	sizeof(asn_DEF_EXTERNAL_tags_1)
		/sizeof(asn_DEF_EXTERNAL_tags_1[0]), /* 2 */
	{ 0, 0, SEQUENCE_constraint },
	asn_MBR_EXTERNAL_1,
	4,	/* Elements count */
	&asn_SPC_EXTERNAL_specs_1	/* Additional specs */
};

